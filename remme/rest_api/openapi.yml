# Copyright 2018 REMME
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ------------------------------------------------------------------------

# TODO better resolver (remover operationId)

# Generate documentation:
# docker run -v $HOME/Projects/Work/Remme/remme-core/remme/rest_api:/docs swaggerapi/swagger-codegen-cli generate -i /docs/openapi.yml -l html2 -o /docs

swagger: '2.0'

info:
  title: 'REMME Core REST API'
  version: '0.1'
basePath: "/api/v1"

consumes:
  - application/json
produces:
  - application/json

paths:
  /node_key:
    get:
      operationId: remme.rest_api.node_key.get
      summary: Retrieve the node public key
      responses:
        200:
          description: The node public key
          schema:
            properties:
              pub_key:
                type: string
                description: The hex-encoded public key of the user
                pattern: '^[0-9a-f]{66}$'
            required:
              - pub_key
        500:
          $ref: '#/responses/500GeneralError'
  /transaction:
    post:
      summary: Send proto transaction to the node
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            properties:
              transaction:
                description: The base64 transaction
                type: string
            required:
              - transaction
      responses:
        200:
          $ref: '#/responses/200BatchSubmitted'
        500:
          $ref: '#/responses/500GeneralError'
  /token:
    post:
      summary: Send tokens from the current user to another user
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            properties:
              pub_key_to:
                description: The hex-encoded public key of the user to send tokens to
                type: string
                pattern: '^[0-9a-f]{66}$'
              amount:
                description: The amount of tokens to be sent
                type: integer
            required:
              - pub_key_to
              - amount
      responses:
        200:
          $ref: '#/responses/200BatchSubmitted'
        500:
          $ref: '#/responses/500GeneralError'
  /token/{pub_key_user}:
    get:
      summary: Retrieve the amount of tokens for the specified user
      parameters:
        - name: pub_key_user
          description: The public key of the user to check the amount of tokens
          in: path
          type: string
          pattern: '^[0-9a-f]{66}$'
          required: true
      responses:
        200:
          description: The amount of tokens for the specified user
          schema:
            properties:
              address:
                type: string
                description: The hex-encoded public key of the user
              balance:
                type: integer
                description: The amount of tokens on user's balance
            required:
              - pub_key
              - balance
        500:
          $ref: '#/responses/500GeneralError'
  /user/{pub_key_user}/certificates:
    get:
      operationId: remme.rest_api.user.get_certificates
      summary: Retrieve the certificates of the specified user
      parameters:
        - name: pub_key_user
          description: The public key of the user to get the certificates
          in: path
          type: string
          pattern: '^[0-9a-f]{66}$'
          required: true
      responses:
        200:
          description: The addresses of certificates for the specified user
          schema:
            properties:
              pub_key:
                type: string
                description: The hex-encoded public key of the user
                pattern: '^[0-9a-f]{66}$'
              certificates:
                type: array
                description: The list of addresses of the certificates
            required:
              - pub_key
              - certificates
        500:
          $ref: '#/responses/500GeneralError'
  /certificate/p12:
    put:
      operationId: remme.rest_api.certificate.put_p12
      summary: Generate and register a new certificate
      parameters:
        - $ref: '#/parameters/certificate_p12_create_payload'
      responses:
        200:
          description: A new certificate was generated and the registration transaction was submitted
          schema:
            properties:
              batch_id:
                $ref: '#/definitions/BatchId'
              certificate:
                type: string
                description: PEM encoded certificate
              priv_key:
                type: string
                description: PEM encoded private key
              saved_to:
                type: string
                description: Path where .p12 file was saved
            required:
              - batch_id
              - certificate
              - priv_key
        500:
          $ref: '#/responses/500GeneralError'
    post:
      operationId: remme.rest_api.certificate.post_p12
      summary: Check the status of the provided p12 certificate
      consumes:
      - multipart/form-data
      parameters:
        - in: formData
          name: certificate
          type: file
          required: true
          description: The file to upload.
        - in: formData
          name: passphrase
          type: string
          required: false
          description: Description of file contents.
      responses:
        200:
          description: Certificate is registered on the REMchain
          schema:
            properties:
              revoked:
                description: Indicates if the certificate was revoked
                type: boolean
              owner_pub_key:
                description: The hex-encoded public key of the certificate owner
                type: string
                pattern: '^[0-9a-f]{66}$'
            required:
              - revoked
              - owner_pub_key
        404:
          $ref: '#/responses/404NoCertificate'
        500:
          $ref: '#/responses/500GeneralError'
    delete:
      operationId: remme.rest_api.certificate.delete_p12
      summary: Revoke a certificate for p12 format.
      consumes:
      - multipart/form-data
      parameters:
        - in: formData
          name: certificate
          type: file
          required: true
          description: The file to upload.
        - in: formData
          name: passphrase
          type: string
          required: false
          description: Description of file contents.
      responses:
        200:
          $ref: '#/responses/200BatchSubmitted'
        404:
          $ref: '#/responses/404NoCertificate'
        500:
          $ref: '#/responses/500GeneralError'
  /certificate:
    put:
      summary: Generate and register a new certificate
      parameters:
        - $ref: '#/parameters/certificate_create_payload'
      responses:
        200:
          description: A new certificate was generated and the registration transaction was submitted
          schema:
            properties:
              batch_id:
                $ref: '#/definitions/BatchId'
              certificate:
                type: string
                description: PEM encoded certificate
              priv_key:
                type: string
                description: PEM encoded private key
            required:
              - batch_id
              - certificate
              - priv_key
        500:
          $ref: '#/responses/500GeneralError'
    delete:
      summary: Revoke a certificate
      parameters:
        - $ref: '#/parameters/certificate_payload'
      responses:
        200:
          $ref: '#/responses/200BatchSubmitted'
        404:
          $ref: '#/responses/404NoCertificate'
        500:
          $ref: '#/responses/500GeneralError'
    post:
      summary: Check the status of the provided certificate
      parameters:
        - $ref: '#/parameters/certificate_payload'
      responses:
        200:
          description: Certificate is registered on the REMchain
          schema:
            properties:
              revoked:
                description: Indicates if the certificate was revoked
                type: boolean
              owner_pub_key:
                description: The hex-encoded public key of the certificate owner
                type: string
                pattern: '^[0-9a-f]{66}$'
            required:
              - revoked
              - owner_pub_key
        404:
          $ref: '#/responses/404NoCertificate'
        500:
          $ref: '#/responses/500GeneralError'
  /certificate/store:
    put:
      operationId: remme.rest_api.certificate.store
      summary: Signs and stores provided certificate signing request(CSR) to REMchain
      parameters:
        - $ref: '#/parameters/certificate_payload'
      responses:
        200:
          description: Certificate signing request (csr) is signed and certificate data registered on the REMchain
          schema:
            properties:
              batch_id:
                $ref: '#/definitions/BatchId'
              certificate:
                type: string
                description: PEM encoded created certificate signed by node
            required:
              - revoked
              - owner_pub_key
        500:
          $ref: '#/responses/500GeneralError'
  /batch_status/{batch_id}:
    get:
      summary: Check the status of the batch sent to the blockchain
      parameters:
        - name: batch_id
          description: The id of the batch to check
          in: path
          type: string
          pattern: '^[0-9a-f]{128}$'
          required: true
      responses:
        200:
          description: Batch status
          schema:
            properties:
              batch_id:
                $ref: '#/definitions/BatchId'
              status:
                description: Batch status
                type: string
            required:
              - batch_id
              - status
        404:
          description: No batch with the given id found
        500:
          $ref: '#/responses/500GeneralError'
  /personal:
    get:
      summary: Get the list of public keys
      responses:
        200:
          description: The list of public keys
          schema:
            properties:
              keys:
                type: array
                items:
                  $ref: '#/definitions/PubkeyMeta'
    put:
      summary: Generate new key pair
      parameters:
        - $ref: '#/parameters/key_name_payload'
      responses:
        200:
          description: Successfully generated a new key
          schema:
            $ref: '#/definitions/PubkeyMeta'
        409:
          description: A key with such name is already registered in the system
    delete:
      summary: Delete the key
      parameters:
        - $ref: '#/parameters/key_name_payload'
      responses:
        200:
          description: Successfully deleted a key
        404:
          description: No key with the given name found
  /atomic-swap/init:
    post:
      operationId: remme.atomic_swap_tp.rest_api.init
      summary: Alice may initialize a swap transaction or Bob may follow one as a "non initiator"
      parameters:
        - $ref: '#/parameters/swap_init_payload'
      responses:
        200:
          $ref: '#/responses/200BatchSubmitted'
        500:
          $ref: '#/responses/500GeneralError'

  /atomic-swap/approve:
    post:
      operationId: remme.atomic_swap_tp.rest_api.approve
      summary: Alice may initialize a swap transaction or Bob may follow one as a "non initiator"
      parameters:
        - $ref: '#/parameters/swap_approve_payload'
      responses:
        200:
          $ref: '#/responses/200BatchSubmitted'
        500:
          $ref: '#/responses/500GeneralError'

  /atomic-swap/expire:
    post:
      operationId: remme.atomic_swap_tp.rest_api.expire
      summary: Alice or Bob expire the swap and receive the refund
      parameters:
        - $ref: '#/parameters/swap_approve_payload'
      responses:
        200:
          $ref: '#/responses/200BatchSubmitted'
        500:
          $ref: '#/responses/500GeneralError'
  /atomic-swap/set-secret-lock:
    post:
      operationId: remme.atomic_swap_tp.rest_api.set_secret_lock
      summary: Bob may set the secret lock
      parameters:
        - $ref: '#/parameters/swap_set_secret_lock_payload'
      responses:
        200:
          $ref: '#/responses/200BatchSubmitted'
        500:
          $ref: '#/responses/500GeneralError'
  /atomic-swap/close:
    post:
      operationId: remme.atomic_swap_tp.rest_api.close
      summary: Close the swap by providing a secret key
      parameters:
        - $ref: '#/parameters/swap_close_payload'
      responses:
        200:
          $ref: '#/responses/200BatchSubmitted'
        500:
          $ref: '#/responses/500GeneralError'
  /atomic-swap/{swap_id}:
    get:
      operationId: remme.atomic_swap_tp.rest_api.get_swap_info
      summary: Get information about swap
      parameters:
        - name: swap_id
          description: The id of the batch to check
          in: path
          type: string
          pattern: '^[0-9a-f]{64}$'
          required: true
      responses:
        200:
          $ref: '#/responses/SwapInfo'
        404:
          description: No batch with the given id found
        500:
          $ref: '#/responses/500GeneralError'

  /atomic-swap/pub-key-encryption:
    get:
      operationId: remme.atomic_swap_tp.rest_api.get_pub_key_encryption
      summary: Get a public key with which to enсrypt sensitive data during the swap. (e.g email address)
      responses:
        200:
          description: Public key
          schema:
            properties:
              pub_key:
                description: Public Key
                type: string

responses:
  200BatchSubmitted:
    description: The transaction was successfully passed to the validator
    schema:
      properties:
        batch_id:
          $ref: '#/definitions/BatchId'
      required:
        - batch_id
  404NoCertificate:
    description: This certificate was not registered on REMchain
  500GeneralError:
    description: Error processing this request
    schema:
      properties:
        error:
          type: string
          description: Error description
  SwapInfo:
    description: Swap info fields
    schema:
      properties:
        is_closed:
          description: is swap close
          type: boolean
        is_approved:
          description: Receiver address
          type: boolean
        sender_address:
          $ref: '#/definitions/Address'
        receiver_address:
          $ref: '#/definitions/Address'
        sender_address_non_local:
          description: Non REMchain agent's address
          type: string
        amount:
          description: Amount to be transferred
          type: integer
        swap_id:
          $ref: '#/definitions/SwapId'
        email_address_encrypted_optional:
          description: Optional encrypted Email address, passed by swap initiator - Alice
          type: string
        secret_lock:
          $ref: '#/definitions/HashString'
        secret_key:
          $ref: '#/definitions/HashString'
        created_at:
          description: Optional for bob, if he is non initiator - to provide a secret lock
          type: integer
        is_initiator:
          description: Is Alice initiator of a transaction on the REMchain side
          type: boolean



parameters:
  swap_init_payload:
    name: payload
    description: Swap init payload
    in: body
    required: true
    schema:
      required:
        - receiver_address
        - sender_address_non_local
        - amount
        - swap_id
        - created_at
      properties:
        receiver_address:
          $ref: '#/definitions/Address'
        sender_address_non_local:
          description: Non REMchain agent's address
          type: string
        amount:
          description: Amount to be transferred
          type: integer
        swap_id:
          $ref: '#/definitions/SwapId'
        email_address_encrypted_by_initiator:
          description: Optional encrypted Email address, passed by swap initiator - Alice
          type: string
        secret_lock_by_solicitor:
          $ref: '#/definitions/HashString'
        created_at:
          description: Optional for bob, if he is non initiator - to provide a secret lock
          type: integer
  swap_approve_payload:
    name: payload
    description: Alice action to approve swap by Bob
    in: body
    required: true
    schema:
      required:
        - swap_id
      properties:
        swap_id:
          $ref: '#/definitions/SwapId'
  swap_expire_payload:
    name: payload
    description: Expire transaction
    in: body
    required: true
    schema:
      required:
        - swap_id
      properties:
        swap_id:
          $ref: '#/definitions/SwapId'
  swap_set_secret_lock_payload:
    name: payload
    description: Bob's action to set a secret lock
    in: body
    required: true
    schema:
      required:
        - swap_id
        - secret_lock
      properties:
        swap_id:
          $ref: '#/definitions/SwapId'
        secret_lock:
          description: Secret lock
          type: string
  swap_close_payload:
    name: payload
    description: Close the swap by providing a secret key
    in: body
    required: true
    schema:
      required:
        - swap_id
        - secret_key
      properties:
        swap_id:
          $ref: '#/definitions/SwapId'
        secret_key:
          $ref: '#/definitions/HashString'

  certificate_payload:
    name: payload
    description: PEM encoded certificate file
    in: body
    required: true
    schema:
      properties:
        certificate:
          description: PEM encoded certificate file
          type: string
        not_valid_before:
          description: The timestamp of a certificate validity starting date
          type: integer
        not_valid_after:
          description: The timestamp of a certificate validity end date
          type: integer
      required:
        - certificate
  certificate_create_payload:
    name: payload
    description: Certificate fields required for certificate creation
    in: body
    required: true
    schema:
      properties:
        validity_after:
          description: The amount of days after what certificate will be valid
          type: integer
        validity:
          description: The amount of days certificate is valid for
          type: integer
        serial:
          description: serial number of the certificate
          type: string
        passphrase:
          description: passphrase as a second factor encryption
          type: string
        country_name:
          description: Country code (2 symbols)
          type: string
          pattern: '[A-Z]{2}'
        state_name:
          description: State or province name
          type: string
        street_address:
          description: Street address
          type: string
        postal_address:
          description: Postal address
          type: string
        business_category:
          description: Business category
          type: string
        postal_code:
          description: Postal code
          type: string
        locality_name:
          description: Locality name
          type: string
        common_name:
          description: Common name
          type: string
        name:
          description: Given name of the certificate user
          type: string
        surname:
          description: Surname of the certificate user
          type: string
        title:
          description: Certificate title
          type: string
        pseudonym:
          description: Pseudonym of the certificate user
          type: string
        generation_qualifier:
          description: Generation qualifier
          type: string
        email:
          description: Email of the certificate user
          type: string
      required:
        - validity
  certificate_p12_create_payload:
    name: payload
    description: Certificate fields required for certificate creation
    in: body
    required: true
    # TODO Get rid of copy-paste here
    schema:
      properties:
        validity_after:
          description: The amount of days after what certificate will be valid
          type: integer
        validity:
          description: The amount of days certificate is valid for
          type: integer
        serial:
          description: serial number of the certificate
          type: string
        passphrase:
          description: passphrase as a second factor encryption
          type: string
        country_name:
          description: Country code (2 symbols)
          type: string
          pattern: '[A-Z]{2}'
        state_name:
          description: State or province name
          type: string
        street_address:
          description: Street address
          type: string
        postal_address:
          description: Postal address
          type: string
        business_category:
          description: Business category
          type: string
        postal_code:
          description: Postal code
          type: string
        locality_name:
          description: Locality name
          type: string
        common_name:
          description: Common name
          type: string
        name:
          description: Given name of the certificate user
          type: string
        surname:
          description: Surname of the certificate user
          type: string
        title:
          description: Certificate title
          type: string
        pseudonym:
          description: Pseudonym of the certificate user
          type: string
        generation_qualifier:
          description: Generation qualifier
          type: string
        email:
          description: Email of the certificate user
          type: string
        name_to_save:
          description: Name of the .p12 file wich should be exported
          type: string
      required:
        - validity
        - name_to_save
  key_name_payload:
    name: payload
    in: body
    required: true
    schema:
      properties:
        name:
          type: string
          description: Suggested name of the key
      required:
        - name

definitions:
  PubkeyMeta:
    properties:
      name:
        type: string
        description: Key file name
      pub_key:
        type: string
        description: hex-encoded public key
        pattern: '^[0-9a-f]{128}$'
  BatchId:
    type: string
    description: The hex-encoded identifier of the batch in which the transaction was submitted
    pattern: '^[0-9a-f]{128}$'
  Address:
    type: string
    description: User account address
    pattern: '^[0-9a-f]{70}$'
  HashString:
    type: string
    description: Hash string
    pattern: '^[0-9a-f]{64}$'
  SwapId:
    type: string
    description: User account address
    pattern: '^[0-9a-f]{64}$'

